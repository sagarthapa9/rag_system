[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "rag-system-qdrant"
version = "1.0.0"
description = "A complete RAG system using Qdrant vector database for document ingestion, vectorization, and LLM-based question answering"
readme = "README.md"
license = "MIT"
requires-python = ">=3.9"
authors = [
    { name = "Your Name", email = "your.email@example.com" },
]
maintainers = [
    { name = "Your Name", email = "your.email@example.com" },
]
keywords = [
    "rag",
    "retrieval-augmented-generation",
    "qdrant",
    "vector-database",
    "nlp",
    "llm",
    "machine-learning",
    "embeddings"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# Core dependencies
dependencies = [
    "qdrant-client>=1.7.0",
    "sentence-transformers>=2.2.0",
    "transformers>=4.30.0",
    "torch>=2.0.0",
    "numpy>=1.21.0",
    "pyyaml>=6.0",
    "pypdf2>=3.0.0",
    "python-docx>=0.8.11",
    "accelerate>=0.20.0",
    "datasets>=2.12.0",
    "click>=8.0.0",  # For better CLI
    "rich>=13.0.0",  # For better terminal output
    "tqdm>=4.64.0",  # Progress bars
]

# Optional dependencies for different use cases
[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

# Documentation dependencies  
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.22.0",
]

# Performance optimization dependencies
performance = [
    "faiss-cpu>=1.7.0",  # Alternative vector search
    "onnxruntime>=1.15.0",  # Optimized inference
    "optimum>=1.12.0",  # Model optimization
]

# Cloud dependencies
cloud = [
    "boto3>=1.28.0",  # AWS S3 for document storage
    "azure-storage-blob>=12.17.0",  # Azure Blob storage
    "google-cloud-storage>=2.10.0",  # Google Cloud storage
]

# All optional dependencies
all = [
    "rag-system-qdrant[dev,docs,performance,cloud]"
]

[project.urls]
Homepage = "https://github.com/yourusername/rag-system-qdrant"
Documentation = "https://github.com/yourusername/rag-system-qdrant#readme"
Repository = "https://github.com/yourusername/rag-system-qdrant.git"
Issues = "https://github.com/yourusername/rag-system-qdrant/issues"
Changelog = "https://github.com/yourusername/rag-system-qdrant/blob/main/CHANGELOG.md"

# CLI entry points
[project.scripts]
rag-system = "rag_system.cli:main"
rag = "rag_system.cli:main"

# GUI entry points (if you add a web interface later)
[project.gui-scripts]
rag-ui = "rag_system.web:main"

# Tool configurations
[tool.hatch.build.targets.wheel]
packages = ["rag_system"]

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docs",
    "/tests",
    "/.gitignore",
    "/.pre-commit-config.yaml",
]

# Black code formatting
[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["rag_system"]
skip_glob = ["*/migrations/*"]

# MyPy type checking
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "qdrant_client.*",
    "sentence_transformers.*",
    "transformers.*",
    "torch.*",
    "pypdf2.*",
    "docx.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=rag_system",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["rag_system"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff linting (alternative to flake8)
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*" = ["B011"]  # Allow assert False in tests

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]